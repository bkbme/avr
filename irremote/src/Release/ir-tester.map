Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
                              ./main.o (__do_copy_data)
/usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
                              ./main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

usbTxBuf            0xb               ./usbdrv.o
pos                 0x1               ./main.o
usbTxStatus1        0xc               ./usbdrv.o
cnt                 0x1               ./main.o
end                 0x1               ./main.o
usbDeviceAddr       0x1               ./usbdrv.o
usbRxToken          0x1               ./usbdrv.o
usbInputBufOffset   0x1               ./usbdrv.o
usbMsgPtr           0x2               ./usbdrv.o
usbRxLen            0x1               ./usbdrv.o
usbNewDeviceAddr    0x1               ./usbdrv.o
usbCurrentTok       0x1               ./usbdrv.o
usbConfiguration    0x1               ./usbdrv.o
usbRxBuf            0x16              ./usbdrv.o
word                0x1               ./main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
LOAD ./main.o
LOAD ./oddebug.o
LOAD ./samsung_protocol.o
LOAD ./usbdrv.o
LOAD ./usbdrvasm.o
LOAD /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x882
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026        0xc ./main.o
                0x0000000000000026                sp_codes
 .progmem.data  0x0000000000000032       0x51 ./usbdrv.o
                0x0000000000000032                usbDescriptorString0
                0x0000000000000036                usbDescriptorStringVendor
                0x000000000000004a                usbDescriptorStringDevice
                0x0000000000000058                usbDescriptorDevice
                0x000000000000006a                usbDescriptorConfiguration
                0x0000000000000084                . = ALIGN (0x2)
 *fill*         0x0000000000000083        0x1 00
                0x0000000000000084                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000084        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000084                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000084                __ctors_start = .
 *(.ctors)
                0x0000000000000084                __ctors_end = .
                0x0000000000000084                __dtors_start = .
 *(.dtors)
                0x0000000000000084                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000084        0x0 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000084                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000084        0xc /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000090       0x16 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
                0x0000000000000090                __do_copy_data
 .init4         0x00000000000000a6       0x10 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
                0x00000000000000a6                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000b6        0x4 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x00000000000000ba        0x2 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
                0x00000000000000ba                __vector_12
                0x00000000000000ba                __bad_interrupt
                0x00000000000000ba                __vector_6
                0x00000000000000ba                __vector_11
                0x00000000000000ba                __vector_13
                0x00000000000000ba                __vector_17
                0x00000000000000ba                __vector_7
                0x00000000000000ba                __vector_5
                0x00000000000000ba                __vector_4
                0x00000000000000ba                __vector_9
                0x00000000000000ba                __vector_2
                0x00000000000000ba                __vector_15
                0x00000000000000ba                __vector_8
                0x00000000000000ba                __vector_14
                0x00000000000000ba                __vector_10
                0x00000000000000ba                __vector_16
                0x00000000000000ba                __vector_18
 .text          0x00000000000000bc      0x16e ./main.o
                0x00000000000000bc                __vector_3
                0x000000000000013c                initPWM
                0x0000000000000162                main
                0x0000000000000198                usbFunctionSetup
 .text          0x000000000000022a        0x0 ./oddebug.o
 .text          0x000000000000022a      0x17a ./samsung_protocol.o
                0x000000000000022a                sp_init
                0x000000000000022e                one_bit
                0x0000000000000258                zero_bit
                0x0000000000000282                start_bit
                0x00000000000002ac                sp_manu_code
                0x00000000000002c8                sp_send
                0x00000000000002fa                sp_send_code
                0x0000000000000372                sp_warm_up
 .text          0x00000000000003a4      0x266 ./usbdrv.o
                0x00000000000003a4                usbInit
                0x00000000000003be                usbPoll
                0x00000000000005be                usbSetInterrupt
 .text          0x000000000000060a      0x274 ./usbdrvasm.o
                0x000000000000060a                usbCrc16
                0x0000000000000634                usbCrc16Append
                0x000000000000063c                __vector_1
 .text          0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
 .text          0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
 .text          0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
                0x000000000000087e                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
                0x000000000000087e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000087e        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
                0x000000000000087e                exit
                0x000000000000087e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000087e        0x4 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000882                _etext = .

.data           0x0000000000800060        0x2 load address 0x0000000000000882
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060        0x0 ./main.o
 .data          0x0000000000800060        0x0 ./oddebug.o
 .data          0x0000000000800060        0x0 ./samsung_protocol.o
 .data          0x0000000000800060        0x2 ./usbdrv.o
                0x0000000000800060                usbTxLen
 .data          0x0000000000800062        0x0 ./usbdrvasm.o
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800062                . = ALIGN (0x2)
                0x0000000000800062                _edata = .
                0x0000000000800062                PROVIDE (__data_end, .)

.bss            0x0000000000800062       0x3d
                0x0000000000800062                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800062        0x0 /usr/lib/gcc/avr/4.4.4/../../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000800062        0x2 ./main.o
 .bss           0x0000000000800064        0x0 ./oddebug.o
 .bss           0x0000000000800064        0x0 ./samsung_protocol.o
 .bss           0x0000000000800064        0x1 ./usbdrv.o
 .bss           0x0000000000800065        0x0 ./usbdrvasm.o
 .bss           0x0000000000800065        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800065        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800065        0x0 /usr/lib/gcc/avr/4.4.4/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800065        0x4 ./main.o
                0x0000000000800065                pos
                0x0000000000800066                cnt
                0x0000000000800067                end
                0x0000000000800068                word
 COMMON         0x0000000000800069       0x36 ./usbdrv.o
                0x0000000000800069                usbTxBuf
                0x0000000000800074                usbTxStatus1
                0x0000000000800080                usbDeviceAddr
                0x0000000000800081                usbRxToken
                0x0000000000800082                usbInputBufOffset
                0x0000000000800083                usbMsgPtr
                0x0000000000800085                usbRxLen
                0x0000000000800086                usbNewDeviceAddr
                0x0000000000800087                usbCurrentTok
                0x0000000000800088                usbConfiguration
                0x0000000000800089                usbRxBuf
                0x000000000080009f                PROVIDE (__bss_end, .)
                0x0000000000000882                __data_load_start = LOADADDR (.data)
                0x0000000000000884                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080009f        0x0
                0x000000000080009f                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080009f                PROVIDE (__noinit_end, .)
                0x000000000080009f                _end = .
                0x000000000080009f                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ir-tester.elf elf32-avr)
LOAD linker stubs
